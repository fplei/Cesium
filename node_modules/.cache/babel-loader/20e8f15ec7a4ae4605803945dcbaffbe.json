{"remainingRequest":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_vue-loader@15.10.0@vue-loader/lib/index.js??vue-loader-options!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/GanttElastic.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/GanttElastic.vue","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/babel.config.js","mtime":1658370777000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_vue-loader@15.10.0@vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";AAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;EACA;IACAA;EACA;AACA;;AACAC;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;EACA;;EACA;IACAC;EACA;;EACA;IACAC;MACAC;IADA,CADA;IAIAC;MACA;MACAC,QAFA;MAGAC,cAHA;MAIAC,cAJA;MAKAC,oBALA;MAMAC,oBANA;MAOAC,YAPA;MAQAC,cARA;MASAC;IATA,CAJA;IAeAC,QAfA;IAgBAC,SAhBA;IAiBAC,cAjBA;IAkBAC,cAlBA;IAmBAC,aAnBA;IAoBAC,wBApBA;IAqBAC;MACAC,gBADA;MAEAC,sBAFA;MAEA;MACAC,sBAHA;MAGA;MACAC,MAJA;MAKAC;QACAC,OADA;QAEAC,QAFA;QAGAH,MAHA;QAIAI;MAJA,CALA;MAWAC;QACAH,OADA;QAEAC,QAFA;QAGAG,UAHA;QAIAC,cAJA;QAKAP,MALA;QAMAI,SANA;QAOAI,OAPA;QAQAC,aARA;QASAC;UACAR,QADA;UAEAC;QAFA;MATA;IAXA,CArBA;IA+CAQ;MACA;MACAC,SAFA;MAGAC;IAHA,CA/CA;IAoDAC;MACAC,oBADA;MAEAC,YAFA;MAEA;MACAC,eAHA;MAIAC,eAJA;MAKAC,cALA;MAMAC,gBANA;MAOAC,eAPA;MAQAC,sBARA;MASAC,sBATA;MAUAC,mBAVA;MAWAC;IAXA,CApDA;IAiEAC;MACAnC,UADA,CACA;;IADA,CAjEA;IAoEAoC,WApEA;IAoEA;IACAC,YArEA;IAqEA;IACAvB;MACAwB;QACAC;UACAC,MADA,CACA;;QADA;MADA,CADA;MAMA7C;QACAI,SADA;QACA;QACAC,SAFA;QAEA;QACAyC,aAHA;QAIAC;MAJA,CANA;MAYAC;QACAC,SADA;QACA;QACAC,YAFA;QAEA;QACAC,aAHA,CAGA;;MAHA,CAZA;MAiBAC;QACAnD,aADA;QAEAkD,cAFA;QAEA;QACAE,6BAHA;QAGA;QACAJ,SAJA;QAIA;QACAK;MALA;IAjBA,CAtEA;IA+FAvC;MACAoC,aADA;MACA;MACAI,0BAFA;MAEA;MACAC,kBAHA;MAGA;MACAC,UACA;MACA;QACA7D,KADA;QAEAE,WAFA;QAGA4D,WAHA;QAIAtD;MAJA,CAFA,CAJA;MAaAgB,YAbA;MAaA;MACAhB,QAdA;MAeAuD,aAfA;MAgBAC,sBAhBA;MAiBAC,YAjBA;MAkBAT;QACAnD,iBADA;QAEAqD,QAFA;QAGAQ,eAHA;QAIAC,WAJA;QAKAC,UALA;QAMAC;MANA;IAlBA,CA/FA;IA0HAC;MACAC,4BADA;MACA;MACAtB,MAFA;MAEA;MACAxC,SAHA;MAIA+D,cAJA;MAKAC;QACAhE,UADA;QACA;QACA8C,aAFA;QAEA;QACAmB,UAHA;QAIAC;UAAAC;UAAAC;UAAAC;QAAA,CAJA;QAKAC;UACAD,QADA;UAEAD,UAFA;UAGAD;QAHA,CALA;QAUAI;UACA;UACAF;YACA;UACA,CAJA;;UAKAD;YACA;UACA,CAPA;;UAQAD;YACA;UACA;;QAVA;MAVA,CALA;MA4BAK;QACAxE,UADA;QACA;QACA8C,aAFA;QAEA;QACAmB,UAHA;QAIAC;UAAAC;UAAAC;UAAAC;QAAA,CAJA;QAKAE;UACAF;YACA;UACA,CAHA;;UAIAD;YACA;UACA,CANA;;UAOAD;YACA;UACA;;QATA;MALA,CA5BA;MA6CAM;QACAzE,UADA;QACA;QACA8C,aAFA;QAEA;QACAmB,UAHA;QAIAC;UAAAC;UAAAC;UAAAC;QAAA,CAJA;QAKAE;UACA;UACAJ;YACA;UACA,CAJA;;UAKAC;YACA;UACA,CAPA;;UAQAC;YACA;UACA;;QAVA;MALA;IA7CA,CA1HA;IA0LAK;MACA;MACAC,UAFA;MAGAC,+EAHA;MAIAC,uDAJA;MAKAC,8CALA;MAMAC,0GANA;MAOAC,yEAPA;MAQAC,YARA;MASAC;QACAC,eADA;QAEAC,cAFA;QAGAC,kBAHA;QAIAC,aAJA;QAKAC,gBALA;QAMAC,YANA;QAOAC,cAPA;QAQAC,UARA;QASAC,aATA;QAUAC,YAVA;QAWAC,eAXA;QAYAC,WAZA;QAaAC;MAbA,CATA;MAwBAC;QACAC,WADA;QAEAC,eAFA;QAGAC,eAHA;QAIAC,iBAJA;QAKAC,wBALA;QAMAC;MANA,CAxBA;MAgCAC;QACA;QACA;QACA;MACA;IApCA;EA1LA;AAiOA;AAEA;AACA;AACA;AACA;AACA;;;AACA;EACA;EACA,wBACAC,gBADA,CACAC,aADA,EAEAC,gBAFA,CAEA,aAFA,EAGAC,QAHA;;EAIA;IACA;MACAC;IACA;;IACA;MACAC;IACA;EACA;;EACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;EACA,OACAC,QACA,wBADA,IAEA,oBAFA,IAGA,8BAHA,IAIA,2CAJA,IAKA,0BANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;EACA;IACA;EACA;;EACA;;EACA;IACA;MACA;QACA;UACAC;QACA;;QACAA;MACA,CALA,MAKA;QACAA;;QACA;UACA;YACAA;YACA;UACA;;UACAA;QACA;MACA,CATA,MASA;QACAA;MACA;IACA;EACA;;EACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;EACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;EACA;IACA;EACA;;EACA;;EACA;IACA;MACA;QACA;UACAC;QACA;;QACAC;MACA,CALA,MAKA;QACAD;MACA,CAFA,MAEA;QACA;UACAD;QACA;MACA,CAJA,MAIA;QACAC;MACA;IACA;EACA;;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;EACA;IACA;MAAArG;MAAAC;MAAAsG;IAAA;EACA,CAFA,MAEA;IACA;MAAAvG;MAAAC;MAAAsG;IAAA;EACA,CAFA,MAEA;IACA;MAAAvG;MAAAC;MAAAsG;IAAA;EACA,CAFA,MAEA;IACA;MACA;QAAAvG;QAAAC;QAAAsG;MAAA;IACA;;IACA;;IACA;MACA;QACA;MACA;IACA;EACA,CAVA,MAUA;IACA;MAAAvG;MAAAC;MAAAsG;IAAA;EACA,CAFA,MAEA;IACA;MAAAvG;MAAAC;MAAAsG;IAAA;EACA,CAFA,MAEA;IACA;MACA;QACA;MACA;;MACA;QACA;UAAAvG;UAAAC;UAAAsG;QAAA;MACA;;MACA;;MACA;QACA;MACA;IACA;EACA,CAbA,MAaA;IACA;MAAAvG;MAAAC;MAAAsG;IAAA;EACA;;EACA;AACA;AAEA;AACA;AACA;AACA;;AACA;EACAvC,oBADA;EAEAwC;IACAC;EADA,CAFA;EAKAC,2CALA;;EAMAC;IACA;IACA;IACAC;MACAC,gBADA;MAEAC;IAFA;IAIA;EACA,CAdA;;EAeAC;IACA;MACAC;QACAC,SADA;QAEAC;UACAC,kBADA;UAEA1H,wBAFA;UAGAF,cAHA;UAIAG;YACAM,OADA;YAEAF;UAFA;QAJA,CAFA;QAWAsH,gBAXA;QAYAC,QAZA;QAaAC,aAbA;QAcAC,YAdA;QAeAC,GAfA;QAgBAC,sBAhBA;QAgBA;QACAC,wBAjBA;QAiBA;QACAC,oBAlBA;QAmBAC,kBAnBA;QAoBAC,oBApBA;QAqBAC,kBArBA;QAsBAC,wBAtBA;QAuBAC,0BAvBA;QAwBAC;MAxBA;IADA;EA4BA,CA5CA;;EA6CAC;IACAC,SADA;IAEA7B,iBAFA;;IAIA;AACA;AACA;AACA;AACA;IACA8B;MACA;MACAC;MACAA;MACAA;MACAvC;MACA;MACAuC;MACA;MACAC;MACAD;MACA;MACAA;MACA;MACA;MACA;IACA,CAzBA;;IA2BA;AACA;AACA;AACA;AACA;IACAE;MACA;QACA;UACAC;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACA;UACAA;QACA,CAFA,MAEA;UACAA;QACA;;QACA;UACAA;QACA;MACA;;MACA;IACA,CAtFA;;IAwFA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACAxB,iBACA,OADA;UAEArI,gCAFA;UAGAC,sCAHA;UAIAC,sCAJA;UAKAC,4CALA;UAMAC,4CANA;UAOAC,oCAPA;UAQAC,sCARA;UASAC;QATA;MAWA;;MACA;IACA,CA7GA;;IA+GA;AACA;AACA;IACAuJ;MACA;MACA;;MACA;QACA;MACA;;MACAC;MACAA;;MACA;QACAzB;MACA;;MACAA;QACA0B;QACAA;QACAA;;QACA;UACAA;QACA;;QACA;UACAA;QACA;;QACAA;QACA;MACA,CAZA;MAaA;MACA3B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA,CAnJA;;IAqJA;AACA;AACA;IACA4B;MACA;IACA,CA1JA;;IA4JA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA,CAnKA;;IAqKA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;QACA;UACAC;QACA;MACA,CAJA;MAKA;IACA,CAlLA;;IAoLA;AACA;AACA;AACA;AACA;IACAC;MACA,OACA,wEACA,2CAFA;IAIA,CA9LA;;IAgMA;AACA;AACA;IACAC;MACA,IACA,iCACA,gFAFA,EAGA;QACA;MACA;IACA,CA1MA;;IA4MA;AACA;AACA;IACAC;MACA;MACA;;MACA;QACA;UACAP,6BACA,2FADA;QAEA,CAHA,MAGA;UACAA;QACA;;QACAQ;QACAR;QACAS;QACAT;MACA;;MACA;MACA;IACA,CAhOA;;IAkOA;AACA;AACA;IACAU;MACA;QACA1K,QADA;QAEAE,aAFA;QAGAyK,YAHA;QAIAC,eAJA;QAKAC,WALA;QAMAC,YANA;QAOAC;MAPA;MASA;;MACA;QACA;QACAC;QACAA;QACAA;QACAA;QACAtC;MACA;;MACA;IACA,CAzPA;;IA2PA;AACA;AACA;AACA;AACA;AACA;IACAuC;MACA;QACA;;QACA;UACA;YACArB;UACA;;UACA;YACAoB;YACAA;UACA,CAHA,MAGA;YACAA;YACAA;UACA;;UACAA;UACApB;UACAA;UACAoB;QACA;MACA;;MACA;IACA,CAtRA;;IAwRA;AACA;AACA;AACA;AACA;AACA;IACAE;MACA;QACA;MACA;;MACA;IACA,CAnSA;;IAqSA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA,CA7SA;;IA+SA;AACA;AACA;AACA;AACA;IACAC;MACA;QACAxB;MACA;;MACA;QACA;UACA;QACA;MACA;;MACA;IACA,CA9TA;;IAgUA;AACA;AACA;AACA;AACA;IACAyB;MACA;IACA,CAvUA;;IAyUA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;;QACAC;UACA;UACAC;UACAA;UACAA;UACAC;QACA,CANA;;QAOAF;MACA,CAVA;IAWA,CA3VA;;IA6VA;AACA;AACA;AACA;AACA;IACAG;MACA,aACAC,2GACA,kCADA,GAEA,uCAFA,GAGA,+BAJA;;MAKA;QACAlL;MACA;;MACA;IACA,CA5WA;;IA8WA;AACA;AACA;AACA;AACA;IACAmL;MACA;QACA,OACA,gCACA,gDADA,GAEA,kDAHA;MAKA;;MACA;IACA,CA5XA;;IA8XA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA,CArYA;;IAuYA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAnZA;;IAqZA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;IACA,CA9ZA;;IAgaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA,OACAF,8DACAA,mDADA,IAEAA,sDACAA,2DAJA;IAMA,CA/aA;;IAibA;AACA;AACA;AACA;AACA;IACAG;MACA,oBACA,yDADA,EAEA,sDAFA;IAIA,CA3bA;;IA6bA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;MACA;;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,uDACA,iEADA,EAEAC,OAFA;MAGA;IACA,CAndA;;IAqdA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;MACAC;;MACA;QACAA;MACA;;MACA;IACA,CAleA;;IAoeA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;QACA;QACA;QACA;MACA;;MACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA,CAxfA;;IA0fA;AACA;AACA;AACA;IACAC;MACA;IACA,CAhgBA;;IAkgBA;AACA;AACA;IACAC;MACA;QACA;QACA;QACA;;QACA;UACAvL;QACA,CAFA,MAEA;UACAA;QACA;;QACA;MACA,CAVA,MAUA;QACA;QACA;QACA;;QACA;UACAE;QACA,CAFA,MAEA;UACAA;QACA;;QACA;MACA,CAVA,MAUA;QACA;QACA;QACA;;QACA;UACAA;QACA,CAFA,MAEA;UACAA;QACA;;QACA;MACA;IACA,CAriBA;;IAuiBA;AACA;AACA;IACAsL;MACA;MACA;MACA;MACA;IACA,CA/iBA;;IAijBA;AACA;AACA;IACAC;MACA;MACA;MACA;IACA,CAxjBA;;IA0jBA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA,CApkBA;;IAskBA;AACA;AACA;IACAC;MACA;MACA;MACA;IACA,CA7kBA;;IA+kBA;AACA;AACA;IACAC;MACA;MACA;IACA,CArlBA;;IAulBA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA,CAnmBA;;IAqmBA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;MACA,wCACA,qGADA;MAEA,6FACA,kCADA,EAEA,cAFA;MAIA,+CACA,oFADA;MAEA,2BACA,+FADA;IAEA,CAvnBA;;IAynBA;AACA;AACA;IACAC;MACA,mFACA9H,MADA,CACA,8BADA,EAEA+H,OAFA,CAEA,KAFA,EAGAC,QAHA,CAGA,+BAHA,EAGA,MAHA,EAIAD,OAJA,CAIA,KAJA,EAKAd,OALA;MAMA,iFACAjH,MADA,CACA,8BADA,EAEAiI,KAFA,CAEA,KAFA,EAGAC,GAHA,CAGA,8BAHA,EAGA,MAHA,EAIAD,KAJA,CAIA,KAJA,EAKAhB,OALA;MAMA;IACA,CA1oBA;;IA4oBA;AACA;AACA;AACA;AACA;IACAkB;MACA;MACA;MACA;MACA3K;QACAjB,2BADA;QAEA2B;UACAkK,KADA;UAEAC;QAFA;MAFA;;MAOA,KACA,4DACAH,GADA,CACA,CADA,EACA,qCADA,EAEAH,OAFA,CAEA,KAFA,CADA,EAIAO,+BAJA,EAKAA,sFALA,EAMA;QACA;QACA;QACA;UACA/L,2BADA;UAEA2B;YACAkK,YADA;YAEAC;UAFA;QAFA;QAOA;QACAE;UACAH,qCADA;UAEAC;QAFA;QAIA7K;MACA;;MACA;MACAgL;QACAJ,qEADA;QAEAC;MAFA;MAIA;IACA,CAzrBA;;IA2rBA;AACA;AACA;IACAI;MACA;MACA;MACA;IACA,CAlsBA;;IAosBA;AACA;AACA;IACAC;MACA;QAAA;MAAA;MACA;MACA;MACA,kEAJA,CAIA;;MACA;;MACA;QACA;MACA;;MACA;QACAlJ;MACA;;MACA;QACA;UAAAF;QAAA;;QACA;UACA;UACA;UACAC;QACA;;QACA;;QACA;UACA;YACAC;UACA;QACA;;QACA8I;MACA;IACA,CAluBA;;IAouBA;AACA;AACA;IACAK;MACA;QAAA;MAAA;MACA;MACA;MACA;MACA;MACA;MACA9F;QACArD;MACA,CAFA;;MAGA;QACA;UACAM;QADA;QAGA+C;UACAtD,gDACA,+DADA,EAEAlE,KAFA;QAGA,CAJA;QAKA;QACAwH;UACA;YACArD;UACA;QACA,CAJA;QAKA8I;MACA;IACA,CAlwBA;;IAowBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAM;MACA;QACA;MACA;;MACA;MACA;MACA;;MACA;QACAC;;QACA;UACAD;QACA;;QACAE;MACA;;MACA;IACA,CA7xBA;;IA+xBA;AACA;AACA;IACAC;MACA;QAAA;MAAA;MACA;MACA;MACA;MACAlG;QACArD;MACA,CAFA;MAGA;MACA;MACA;;MACA;QACA;UACAO;QADA;QAGA8C;UACAtD,gDACA,iEADA,EAEAlE,KAFA;QAGA,CAJA;QAKA;QACAwH;UACA;YACArD;UACA;QACA,CAJA;QAKA8I;MACA;IACA,CA9zBA;;IAg0BA;AACA;AACA;IACAU;MACA;MACA;;MACA;QACA;;QACA;UACA7L;QACA;;QACA;UACAC;QACA;MACA;;MACA;MACA;MACA,0DACA4C,MADA,CACA,8BADA,EAEA+H,OAFA,CAEA,KAFA,EAGAC,QAHA,CAGA,+BAHA,EAGA,MAHA,EAIAD,OAJA,CAIA,KAJA,EAKAd,OALA;MAMA,wDACAjH,MADA,CACA,8BADA,EAEAiI,KAFA,CAEA,KAFA,EAGAC,GAHA,CAGA,8BAHA,EAGA,MAHA,EAIAD,KAJA,CAIA,KAJA,EAKAhB,OALA;IAMA,CA71BA;;IA+1BA;AACA;AACA;IACAgC;MACA;MACA;MACA;MACA;MACA;MACA,+EACA;QACA;UAAA5N;QAAA;MACA,CAHA,EAIA;QAAAA;MAAA,CAJA,EAKAA,KALA;IAMA,CA92BA;;IAg3BA;AACA;AACA;IACA6N;MACA;QACA;MACA;;MACA;;MACA,IACA,kDACA,iFAFA,EAGA;QACA,aACA,kDACA,iFAFA;QAGA;;QACA;UACAC;QACA;;QACA;UACAtE;QACA,CAFA;MAGA,CAdA,MAcA;QACA;UACAA;QACA,CAFA;MAGA;;MACA;MACA;MACA;IACA;;EA94BA,CA7CA;EA87BAuE;IACA;AACA;AACA;AACA;AACA;IACA5C;MACA;MACA;MACA;MACA;;MACA;QACA6C;QACA;MACA;;MACA;MACA;MACA;MACA;;MACA;QACA;QACA5E,aACAA,wGADA;;QAEA;UACAA;QACA;;QACAA;QACAA;QACAA,SACA,6FACA,4CAFA;MAGA;;MACA;IACA,CAjCA;;IAmCA;AACA;AACA;IACAtJ;MACA;IACA,CAxCA;;IA0CA;AACA;AACA;IACAmO;MACA;MACA;IACA,CAhDA;;IAkDA;AACA;AACA;IACAC;MACA;IACA,CAvDA;;IAyDA;AACA;AACA;IACAC;MACA;IACA;;EA9DA,CA97BA;;EA+/BA;AACA;AACA;EACAC;IACA;IACA;IACA,sCACA,OADA,EAEAvG;MACA;;MACA;QACA;MACA;IACA,CAPA,EAQA;MAAAwG;IAAA,CARA;IAUA,wCACA,SADA,EAEAC;MACA;;MACA;QACA;MACA;IACA,CAPA,EAQA;MAAAD;IAAA,CARA;IAUA,sCACA,cADA,EAEAvO;MACA;;MACA;QACA;MACA;IACA,CAPA,EAQA;MAAAuO;MAAAE;IAAA,CARA;IAWA,4CACA,aADA,EAEA1G;MACA;IACA,CAJA,EAKA;MAAAwG;IAAA,CALA;IAOA,8CACA,eADA,EAEAvG;MACA;IACA,CAJA,EAKA;MAAAuG;IAAA,CALA;IAOA,4CACA,OADA,EAEAvO;MACA;IACA,CAJA,EAKA;MAAAuO;IAAA,CALA;IAQA;IACA;EACA,CA5jCA;;EA8jCA;AACA;AACA;EACAG;IACA;EACA,CAnkCA;;EAqkCA;AACA;AACA;EACAC;IACA;IACA;MACA;IACA,CAFA;IAGA;IACA;IACA;IACA;IACA;IACA;EACA,CAnlCA;;EAqlCA;AACA;AACA;EACAC;IACA;EACA,CA1lCA;;EA4lCA;AACA;AACA;EACAC;IACA;MACA;IACA,CAFA;EAGA,CAnmCA;;EAqmCA;AACA;AACA;EACAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA,CAjnCA;;EAmnCA;AACA;AACA;EACAC;IACA;EACA;;AAxnCA;AA0nCA","names":["VueInst","initVue","localeName","slots","header","taskMapping","id","start","label","duration","progress","type","style","collapsed","width","height","clientWidth","outerHeight","rowsHeight","allVisibleTasksHeight","scroll","scrolling","dragXMoveMultiplier","dragYMoveMultiplier","top","taskList","left","right","bottom","chart","percent","timePercent","time","timeCenter","dateTime","scope","before","after","times","timeScale","timeZoom","timePerPixel","firstTime","lastTime","firstTaskTime","lastTaskTime","totalViewDurationMs","totalViewDurationPx","stepDuration","steps","row","maxRows","maxHeight","grid","horizontal","gap","pattern","bar","text","offset","xPadding","display","expander","displayIfTaskListHidden","size","resizeAfterThreshold","widthThreshold","columns","value","finalWidth","widthFromPercentage","minWidth","columnWidth","padding","margin","straight","calendar","workingDays","strokeWidth","hour","widths","maxWidths","short","medium","long","formatted","format","day","month","locale","name","weekdays","weekdaysShort","weekdaysMin","months","monthsShort","weekStart","relativeTime","future","past","s","m","mm","h","hh","d","dd","M","MM","y","yy","formats","LT","LTS","L","LL","LLL","LLLL","ordinal","getComputedStyle","document","getPropertyValue","toString","fontSize","fontFamily","item","target","component","mergeDeepReactive","what","components","MainView","props","provide","Object","enumerable","get","data","state","tasks","options","scrollBarHeight","dynamicStyle","refs","tasksById","taskTree","ctx","emitTasksChanges","emitOptionsChanges","resizeObserver","unwatchTasks","unwatchOptions","unwatchStyle","unwatchOutputTasks","unwatchOutputOptions","unwatchOutputStyle","methods","mergeDeep","getScrollBarHeight","outer","inner","fillTasks","task","mapTasks","initialize","dayjs","column","initializeStyle","getCalendarHeight","getMaximalLevel","maximalLevel","getMaximalExpanderWidth","syncScrollTop","calculateTaskListColumnsDimensions","percentage","final","resetTaskTree","children","allChildren","parents","parent","__root","current","makeTaskTree","getTask","getChildren","isTaskVisible","getSVG","getImage","img","canvas","resolve","getHeight","visibleTasks","getTaskHeight","getTasksHeight","timeToPixelOffsetX","x","pixelOffsetXToTime","isInsideViewPort","onScrollChart","_onScrollChart","valueOf","scrollToTime","pos","scrollTo","fixScrollPos","onWheelChart","onTimeZoomChange","onRowHeightChange","onScopeChange","onTaskListWidthChange","onTaskListColumnWidthChange","initializeEvents","recalculateTimes","initTimes","startOf","subtract","endOf","add","calculateSteps","ms","px","currentDate","previousStep","lastStep","computeCalendarWidths","computeHourWidths","computeDayWidths","monthsCount","currentMonth","previousMonth","computeMonthWidths","prepareDates","setup","globalOnResize","diffPercent","computed","heightCompensation","getTaskListColumns","outputTasks","outputOptions","created","deep","opts","immediate","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed"],"sourceRoot":"node_modules/_gantt-elastic@1.0.12@gantt-elastic/src","sources":["GanttElastic.vue"],"sourcesContent":["<!--\n/**\n * @fileoverview GanttElastic component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <div class=\"gantt-elastic\" style=\"width:100%\">\n    <slot name=\"header\"></slot>\n    <main-view ref=\"mainView\"></main-view>\n    <slot name=\"footer\"></slot>\n  </div>\n</template>\n\n<script>\nimport VueInstance from 'vue';\nimport dayjs from 'dayjs';\nimport MainView from './components/MainView.vue';\nimport getStyle from './style.js';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst ctx = document.createElement('canvas').getContext('2d');\nlet VueInst = VueInstance;\nfunction initVue() {\n  if (typeof Vue !== 'undefined' && typeof VueInst === 'undefined') {\n    VueInst = Vue;\n  }\n}\ninitVue();\n\nlet hourWidthCache = null;\n\n/**\n * Helper function to fill out empty options in user settings\n *\n * @param {object} userOptions - initial user options that will merge with those below\n * @returns {object} merged options\n */\nfunction getOptions(userOptions) {\n  let localeName = 'en';\n  if (typeof userOptions.locale !== 'undefined' && typeof userOptions.locale.name !== 'undefined') {\n    localeName = userOptions.locale.name;\n  }\n  return {\n    slots: {\n      header: {}\n    },\n    taskMapping: {\n      //*\n      id: 'id',\n      start: 'start',\n      label: 'label',\n      duration: 'duration',\n      progress: 'progress',\n      type: 'type',\n      style: 'style',\n      collapsed: 'collapsed'\n    },\n    width: 0,\n    height: 0,\n    clientWidth: 0,\n    outerHeight: 0,\n    rowsHeight: 0,\n    allVisibleTasksHeight: 0,\n    scroll: {\n      scrolling: false,\n      dragXMoveMultiplier: 3, //*\n      dragYMoveMultiplier: 2, //*\n      top: 0,\n      taskList: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      },\n      chart: {\n        left: 0,\n        right: 0,\n        percent: 0,\n        timePercent: 0,\n        top: 0,\n        bottom: 0,\n        time: 0,\n        timeCenter: 0,\n        dateTime: {\n          left: '',\n          right: ''\n        }\n      }\n    },\n    scope: {\n      //*\n      before: 1,\n      after: 1\n    },\n    times: {\n      timeScale: 60 * 1000,\n      timeZoom: 17, //*\n      timePerPixel: 0,\n      firstTime: null,\n      lastTime: null,\n      firstTaskTime: 0,\n      lastTaskTime: 0,\n      totalViewDurationMs: 0,\n      totalViewDurationPx: 0,\n      stepDuration: 'day',\n      steps: []\n    },\n    row: {\n      height: 24 //*\n    },\n    maxRows: 20, //*\n    maxHeight: 0, //*\n    chart: {\n      grid: {\n        horizontal: {\n          gap: 6 //*\n        }\n      },\n      progress: {\n        width: 20, //*\n        height: 6, //*\n        pattern: true,\n        bar: false\n      },\n      text: {\n        offset: 4, //*\n        xPadding: 10, //*\n        display: true //*\n      },\n      expander: {\n        type: 'chart',\n        display: false, //*\n        displayIfTaskListHidden: true, //*\n        offset: 4, //*\n        size: 18\n      }\n    },\n    taskList: {\n      display: true, //*\n      resizeAfterThreshold: true, //*\n      widthThreshold: 75, //*\n      columns: [\n        //*\n        {\n          id: 0,\n          label: 'ID',\n          value: 'id',\n          width: 40\n        }\n      ],\n      percent: 100, //*\n      width: 0,\n      finalWidth: 0,\n      widthFromPercentage: 0,\n      minWidth: 18,\n      expander: {\n        type: 'task-list',\n        size: 16,\n        columnWidth: 24,\n        padding: 16,\n        margin: 10,\n        straight: false\n      }\n    },\n    calendar: {\n      workingDays: [1, 2, 3, 4, 5], //*\n      gap: 6, //*\n      height: 0,\n      strokeWidth: 1,\n      hour: {\n        height: 20, //*\n        display: true, //*\n        widths: [],\n        maxWidths: { short: 0, medium: 0, long: 0 },\n        formatted: {\n          long: [],\n          medium: [],\n          short: []\n        },\n        format: {\n          //*\n          long(date) {\n            return date.format('HH:mm');\n          },\n          medium(date) {\n            return date.format('HH:mm');\n          },\n          short(date) {\n            return date.format('HH');\n          }\n        }\n      },\n      day: {\n        height: 20, //*\n        display: true, //*\n        widths: [],\n        maxWidths: { short: 0, medium: 0, long: 0 },\n        format: {\n          long(date) {\n            return date.format('DD dddd');\n          },\n          medium(date) {\n            return date.format('DD ddd');\n          },\n          short(date) {\n            return date.format('DD');\n          }\n        }\n      },\n      month: {\n        height: 20, //*\n        display: true, //*\n        widths: [],\n        maxWidths: { short: 0, medium: 0, long: 0 },\n        format: {\n          //*\n          short(date) {\n            return date.format('MM');\n          },\n          medium(date) {\n            return date.format(\"MMM 'YY\");\n          },\n          long(date) {\n            return date.format('MMMM YYYY');\n          }\n        }\n      }\n    },\n    locale: {\n      //*\n      name: 'en',\n      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n      months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n      weekStart: 1,\n      relativeTime: {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years'\n      },\n      formats: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd, D MMMM YYYY HH:mm'\n      },\n      ordinal: n => {\n        const s = ['th', 'st', 'nd', 'rd'];\n        const v = n % 100;\n        return `[${n}${s[(v - 20) % 10] || s[v] || s[0]}]`;\n      }\n    }\n  };\n}\n\n/**\n * Prepare style\n *\n * @returns {object}\n */\nfunction prepareStyle(userStyle) {\n  let fontSize = '12px';\n  let fontFamily = window\n    .getComputedStyle(document.body)\n    .getPropertyValue('font-family')\n    .toString();\n  if (typeof userStyle !== 'undefined') {\n    if (typeof userStyle.fontSize !== 'undefined') {\n      fontSize = userStyle.fontSize;\n    }\n    if (typeof userStyle.fontFamily !== 'undefined') {\n      fontFamily = userStyle.fontFamily;\n    }\n  }\n  return getStyle(fontSize, fontFamily);\n}\n\n/**\n * Helper function to determine if specified variable is an object\n *\n * @param {any} item\n *\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return (\n    item &&\n    typeof item === 'object' &&\n    !Array.isArray(item) &&\n    !(item instanceof HTMLElement) &&\n    !(item instanceof CanvasRenderingContext2D) &&\n    typeof item !== 'function'\n  );\n}\n\n/**\n * Helper function which will merge objects recursively - creating brand new one - like clone\n *\n * @param {object} target\n * @params {object} sources\n *\n * @returns {object}\n */\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (typeof target[key] === 'undefined') {\n          target[key] = {};\n        }\n        target[key] = mergeDeep(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = [];\n        for (let item of source[key]) {\n          if (isObject(item)) {\n            target[key].push(mergeDeep({}, item));\n            continue;\n          }\n          target[key].push(item);\n        }\n      } else {\n        target[key] = source[key];\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n}\n\n/**\n * Detect if object or array is observable\n *\n * @param {object|array} obj\n *\n * @returns {boolean}\n */\nfunction isObservable(obj) {\n  return typeof obj === 'object' && obj.hasOwnProperty('__ob__');\n}\n\n/**\n * Same as above but with reactivity in mind\n *\n * @param {object} target\n * @params {object} sources\n *\n * @returns {object}\n */\nexport function mergeDeepReactive(component, target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (typeof target[key] === 'undefined') {\n          component.$set(target, key, {});\n        }\n        mergeDeepReactive(component, target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        component.$set(target, key, source[key]);\n      } else if (typeof source[key] === 'function') {\n        if (source[key].toString().indexOf('[native code]') === -1) {\n          target[key] = source[key];\n        }\n      } else {\n        component.$set(target, key, source[key]);\n      }\n    }\n  }\n  return mergeDeepReactive(component, target, ...sources);\n}\n/**\n * Check if objects or arrays are equal by comparing nested values\n *\n * @param {object|array} left\n * @param {object|array} right\n *\n * @returns {boolean}\n */\nexport function notEqualDeep(left, right, cache = [], path = '') {\n  if (typeof right !== typeof left) {\n    return { left, right, what: path + '.typeof' };\n  } else if (Array.isArray(left) && !Array.isArray(right)) {\n    return { left, right, what: path + '.isArray' };\n  } else if (Array.isArray(right) && !Array.isArray(left)) {\n    return { left, right, what: path + '.isArray' };\n  } else if (Array.isArray(left) && Array.isArray(right)) {\n    if (left.length !== right.length) {\n      return { left, right, what: path + '.length' };\n    }\n    let what;\n    for (let index = 0, len = left.length; index < len; index++) {\n      if ((what = notEqualDeep(left[index], right[index], cache, path + '.' + index))) {\n        return what;\n      }\n    }\n  } else if (isObject(left) && !isObject(right)) {\n    return { left, right, what: path + '.isObject' };\n  } else if (isObject(right) && !isObject(left)) {\n    return { left, right, what: path + '.isObject' };\n  } else if (isObject(left) && isObject(right)) {\n    for (let key in left) {\n      if (!left.hasOwnProperty(key) || !left.propertyIsEnumerable(key)) {\n        continue;\n      }\n      if (!right.hasOwnProperty(key)) {\n        return { left, right, what: path + '.' + key };\n      }\n      let what;\n      if ((what = notEqualDeep(left[key], right[key], cache, path + '.' + key))) {\n        return what;\n      }\n    }\n  } else if (left !== right) {\n    return { left, right, what: path + '. !==' };\n  }\n  return false;\n}\n\n/**\n * GanttElastic\n * Main vue component\n */\nconst GanttElastic = {\n  name: 'GanttElastic',\n  components: {\n    MainView\n  },\n  props: ['tasks', 'options', 'dynamicStyle'],\n  provide() {\n    const provider = {};\n    const self = this;\n    Object.defineProperty(provider, 'root', {\n      enumerable: true,\n      get: () => self\n    });\n    return provider;\n  },\n  data() {\n    return {\n      state: {\n        tasks: [],\n        options: {\n          scrollBarHeight: 0,\n          allVisibleTasksHeight: 0,\n          outerHeight: 0,\n          scroll: {\n            left: 0,\n            top: 0\n          }\n        },\n        dynamicStyle: {},\n        refs: {},\n        tasksById: {},\n        taskTree: {},\n        ctx,\n        emitTasksChanges: true, // some operations may pause emitting changes to parent component\n        emitOptionsChanges: true, // some operations may pause emitting changes to parent component\n        resizeObserver: null,\n        unwatchTasks: null,\n        unwatchOptions: null,\n        unwatchStyle: null,\n        unwatchOutputTasks: null,\n        unwatchOutputOptions: null,\n        unwatchOutputStyle: null\n      }\n    };\n  },\n  methods: {\n    mergeDeep,\n    mergeDeepReactive,\n\n    /**\n     * Calculate height of scrollbar in current browser\n     *\n     * @returns {number}\n     */\n    getScrollBarHeight() {\n      const outer = document.createElement('div');\n      outer.style.visibility = 'hidden';\n      outer.style.height = '100px';\n      outer.style.msOverflowStyle = 'scrollbar';\n      document.body.appendChild(outer);\n      var noScroll = outer.offsetHeight;\n      outer.style.overflow = 'scroll';\n      var inner = document.createElement('div');\n      inner.style.height = '100%';\n      outer.appendChild(inner);\n      var withScroll = inner.offsetHeight;\n      outer.parentNode.removeChild(outer);\n      const height = noScroll - withScroll;\n      this.style['chart-scroll-container--vertical']['margin-left'] = `-${height}px`;\n      return (this.state.options.scrollBarHeight = height);\n    },\n\n    /**\n     * Fill out empty task properties and make it reactive\n     *\n     * @param {array} tasks\n     */\n    fillTasks(tasks) {\n      for (let task of tasks) {\n        if (typeof task.x === 'undefined') {\n          task.x = 0;\n        }\n        if (typeof task.y === 'undefined') {\n          task.y = 0;\n        }\n        if (typeof task.width === 'undefined') {\n          task.width = 0;\n        }\n        if (typeof task.height === 'undefined') {\n          task.height = 0;\n        }\n        if (typeof task.mouseOver === 'undefined') {\n          task.mouseOver = false;\n        }\n        if (typeof task.collapsed === 'undefined') {\n          task.collapsed = false;\n        }\n        if (typeof task.dependentOn === 'undefined') {\n          task.dependentOn = [];\n        }\n        if (typeof task.parentId === 'undefined') {\n          task.parentId = null;\n        }\n        if (typeof task.style === 'undefined') {\n          task.style = {};\n        }\n        if (typeof task.children === 'undefined') {\n          task.children = [];\n        }\n        if (typeof task.allChildren === 'undefined') {\n          task.allChildren = [];\n        }\n        if (typeof task.parents === 'undefined') {\n          task.parents = [];\n        }\n        if (typeof task.parent === 'undefined') {\n          task.parent = null;\n        }\n        if (typeof task.startTime === 'undefined') {\n          task.startTime = dayjs(task.start).valueOf();\n        }\n        if (typeof task.endTime === 'undefined' && task.hasOwnProperty('end')) {\n          task.endTime = dayjs(task.end).valueOf();\n        } else if (typeof task.endTime === 'undefined' && task.hasOwnProperty('duration')) {\n          task.endTime = task.startTime + task.duration;\n        }\n        if (typeof task.duration === 'undefined' && task.hasOwnProperty('endTime')) {\n          task.duration = task.endTime - task.startTime;\n        }\n      }\n      return tasks;\n    },\n\n    /**\n     * Map tasks\n     *\n     * @param {Array} tasks\n     * @param {Object} options\n     */\n    mapTasks(tasks, options) {\n      for (let [index, task] of tasks.entries()) {\n        tasks[index] = {\n          ...task,\n          id: task[options.taskMapping.id],\n          start: task[options.taskMapping.start],\n          label: task[options.taskMapping.label],\n          duration: task[options.taskMapping.duration],\n          progress: task[options.taskMapping.progress],\n          type: task[options.taskMapping.type],\n          style: task[options.taskMapping.style],\n          collapsed: task[options.taskMapping.collapsed]\n        };\n      }\n      return tasks;\n    },\n\n    /**\n     * Initialize component\n     */\n    initialize(itsUpdate = '') {\n      let options = mergeDeep({}, this.state.options, getOptions(this.options), this.options);\n      let tasks = this.mapTasks(this.tasks, options);\n      if (Object.keys(this.state.dynamicStyle).length === 0) {\n        this.initializeStyle();\n      }\n      dayjs.locale(options.locale, null, true);\n      dayjs.locale(options.locale.name);\n      if (typeof options.taskList === 'undefined') {\n        options.taskList = {};\n      }\n      options.taskList.columns = options.taskList.columns.map((column, index) => {\n        column.thresholdPercent = 100;\n        column.widthFromPercentage = 0;\n        column.finalWidth = 0;\n        if (typeof column.height === 'undefined') {\n          column.height = 0;\n        }\n        if (typeof column.style === 'undefined') {\n          column.style = {};\n        }\n        column._id = `${index}-${column.label}`;\n        return column;\n      });\n      this.state.options = options;\n      tasks = this.fillTasks(tasks);\n      this.state.tasksById = this.resetTaskTree(tasks);\n      this.state.taskTree = this.makeTaskTree(this.state.rootTask, tasks);\n      this.state.tasks = this.state.taskTree.allChildren.map(childId => this.getTask(childId));\n      this.calculateTaskListColumnsDimensions();\n      this.state.options.scrollBarHeight = this.getScrollBarHeight();\n      this.state.options.outerHeight = this.state.options.height + this.state.options.scrollBarHeight;\n      this.globalOnResize();\n    },\n\n    /**\n     * Initialize style\n     */\n    initializeStyle() {\n      this.state.dynamicStyle = mergeDeep({}, prepareStyle(this.dynamicStyle), this.dynamicStyle);\n    },\n\n    /**\n     * Get calendar rows outer height\n     *\n     * @returns {int}\n     */\n    getCalendarHeight() {\n      return this.state.options.calendar.height + this.state.options.calendar.strokeWidth;\n    },\n\n    /**\n     * Get maximal level of nested task children\n     *\n     * @returns {int}\n     */\n    getMaximalLevel() {\n      let maximalLevel = 0;\n      this.state.tasks.forEach(task => {\n        if (task.parents.length > maximalLevel) {\n          maximalLevel = task.parents.length;\n        }\n      });\n      return maximalLevel - 1;\n    },\n\n    /**\n     * Get maximal expander width - to calculate straight task list text\n     *\n     * @returns {int}\n     */\n    getMaximalExpanderWidth() {\n      return (\n        this.getMaximalLevel() * this.state.options.taskList.expander.padding +\n        this.state.options.taskList.expander.margin\n      );\n    },\n\n    /**\n     * Synchronize scrollTop property when row height is changed\n     */\n    syncScrollTop() {\n      if (\n        this.state.refs.taskListItems &&\n        this.state.refs.chartGraph.scrollTop !== this.state.refs.taskListItems.scrollTop\n      ) {\n        this.state.options.scroll.top = this.state.refs.taskListItems.scrollTop = this.state.refs.chartScrollContainerVertical.scrollTop = this.state.refs.chartGraph.scrollTop;\n      }\n    },\n\n    /**\n     * Calculate task list columns dimensions\n     */\n    calculateTaskListColumnsDimensions() {\n      let final = 0;\n      let percentage = 0;\n      for (let column of this.state.options.taskList.columns) {\n        if (column.expander) {\n          column.widthFromPercentage =\n            ((this.getMaximalExpanderWidth() + column.width) / 100) * this.state.options.taskList.percent;\n        } else {\n          column.widthFromPercentage = (column.width / 100) * this.state.options.taskList.percent;\n        }\n        percentage += column.widthFromPercentage;\n        column.finalWidth = (column.thresholdPercent * column.widthFromPercentage) / 100;\n        final += column.finalWidth;\n        column.height = this.getTaskHeight() - this.style['grid-line-horizontal']['stroke-width'];\n      }\n      this.state.options.taskList.widthFromPercentage = percentage;\n      this.state.options.taskList.finalWidth = final;\n    },\n\n    /**\n     * Reset task tree - which is used to create tree like structure inside task list\n     */\n    resetTaskTree(tasks) {\n      this.$set(this.state, 'rootTask', {\n        id: null,\n        label: 'root',\n        children: [],\n        allChildren: [],\n        parents: [],\n        parent: null,\n        __root: true\n      });\n      const tasksById = {};\n      for (let i = 0, len = tasks.length; i < len; i++) {\n        let current = tasks[i];\n        current.children = [];\n        current.allChildren = [];\n        current.parent = null;\n        current.parents = [];\n        tasksById[current.id] = current;\n      }\n      return tasksById;\n    },\n\n    /**\n     * Make task tree, after reset - look above\n     *\n     * @param {object} task\n     * @returns {object} tasks with children and parents\n     */\n    makeTaskTree(task, tasks) {\n      for (let i = 0, len = tasks.length; i < len; i++) {\n        let current = tasks[i];\n        if (current.parentId === task.id) {\n          if (task.parents.length) {\n            task.parents.forEach(parent => current.parents.push(parent));\n          }\n          if (!task.propertyIsEnumerable('__root')) {\n            current.parents.push(task.id);\n            current.parent = task.id;\n          } else {\n            current.parents = [];\n            current.parent = null;\n          }\n          current = this.makeTaskTree(current, tasks);\n          task.allChildren.push(current.id);\n          task.children.push(current.id);\n          current.allChildren.forEach(childId => task.allChildren.push(childId));\n        }\n      }\n      return task;\n    },\n\n    /**\n     * Get task by id\n     *\n     * @param {any} taskId\n     * @returns {object|null} task\n     */\n    getTask(taskId) {\n      if (typeof this.state.tasksById[taskId] !== 'undefined') {\n        return this.state.tasksById[taskId];\n      }\n      return null;\n    },\n\n    /**\n     * Get children tasks for specified taskId\n     *\n     * @param {any} taskId\n     * @returns {array} children\n     */\n    getChildren(taskId) {\n      return this.state.tasks.filter(task => task.parent === taskId);\n    },\n\n    /**\n     * Is task visible\n     *\n     * @param {Number|String|Task} task\n     */\n    isTaskVisible(task) {\n      if (typeof task === 'number' || typeof task === 'string') {\n        task = this.getTask(task);\n      }\n      for (let i = 0, len = task.parents.length; i < len; i++) {\n        if (this.getTask(task.parents[i]).collapsed) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Get svg\n     *\n     * @returns {string} html svg image of gantt\n     */\n    getSVG() {\n      return this.state.options.mainView.outerHTML;\n    },\n\n    /**\n     * Get image\n     *\n     * @param {string} type image format\n     * @returns {Promise} when resolved returns base64 image string of gantt\n     */\n    getImage(type = 'image/png') {\n      return new Promise(resolve => {\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          canvas.width = this.state.options.mainView.clientWidth;\n          canvas.height = this.state.options.rowsHeight;\n          canvas.getContext('2d').drawImage(img, 0, 0);\n          resolve(canvas.toDataURL(type));\n        };\n        img.src = 'data:image/svg+xml,' + encodeURIComponent(this.getSVG());\n      });\n    },\n\n    /**\n     * Get gantt total height\n     *\n     * @returns {number}\n     */\n    getHeight(visibleTasks, outer = false) {\n      let height =\n        visibleTasks.length * (this.state.options.row.height + this.state.options.chart.grid.horizontal.gap * 2) +\n        this.state.options.calendar.height +\n        this.state.options.calendar.strokeWidth +\n        this.state.options.calendar.gap;\n      if (outer) {\n        height += this.state.options.scrollBarHeight;\n      }\n      return height;\n    },\n\n    /**\n     * Get one task height\n     *\n     * @returns {number}\n     */\n    getTaskHeight(withStroke = false) {\n      if (withStroke) {\n        return (\n          this.state.options.row.height +\n          this.state.options.chart.grid.horizontal.gap * 2 +\n          this.style['grid-line-horizontal']['stroke-width']\n        );\n      }\n      return this.state.options.row.height + this.state.options.chart.grid.horizontal.gap * 2;\n    },\n\n    /**\n     * Get specified tasks height\n     *\n     * @returns {number}\n     */\n    getTasksHeight(visibleTasks) {\n      return visibleTasks.length * this.getTaskHeight();\n    },\n\n    /**\n     * Convert time (in milliseconds) to pixel offset inside chart\n     *\n     * @param {int} ms\n     * @returns {number}\n     */\n    timeToPixelOffsetX(ms) {\n      let x = ms - this.state.options.times.firstTime;\n      if (x) {\n        x = x / this.state.options.times.timePerPixel;\n      }\n      return x;\n    },\n\n    /**\n     * Convert pixel offset inside chart to corresponding time offset in milliseconds\n     *\n     * @param {number} pixelOffsetX\n     * @returns {int} milliseconds\n     */\n    pixelOffsetXToTime(pixelOffsetX) {\n      let offset = pixelOffsetX + this.style['grid-line-vertical']['stroke-width'] / 2;\n      return offset * this.state.options.times.timePerPixel + this.state.options.times.firstTime;\n    },\n\n    /**\n     * Determine if element is inside current view port\n     *\n     * @param {number} x - element placement\n     * @param {number} width - element width\n     * @param {int} buffer - or threshold, if element is outside viewport but offset from view port is below this value return true\n     * @returns {boolean}\n     */\n    isInsideViewPort(x, width, buffer = 5000) {\n      return (\n        (x + width + buffer >= this.state.options.scroll.chart.left &&\n          x - buffer <= this.state.options.scroll.chart.right) ||\n        (x - buffer <= this.state.options.scroll.chart.left &&\n          x + width + buffer >= this.state.options.scroll.chart.right)\n      );\n    },\n\n    /**\n     * Chart scroll event handler\n     *\n     * @param {event} ev\n     */\n    onScrollChart(ev) {\n      this._onScrollChart(\n        this.state.refs.chartScrollContainerHorizontal.scrollLeft,\n        this.state.refs.chartScrollContainerVertical.scrollTop\n      );\n    },\n\n    /**\n     * After same as above but with different arguments - normalized\n     *\n     * @param {number} left\n     * @param {number} top\n     */\n    _onScrollChart(left, top) {\n      if (this.state.options.scroll.chart.left === left && this.state.options.scroll.chart.top === top) {\n        return;\n      }\n      const chartContainerWidth = this.state.refs.chartContainer.clientWidth;\n      this.state.options.scroll.chart.left = left;\n      this.state.options.scroll.chart.right = left + chartContainerWidth;\n      this.state.options.scroll.chart.percent = (left / this.state.options.times.totalViewDurationPx) * 100;\n      this.state.options.scroll.chart.top = top;\n      this.state.options.scroll.chart.time = this.pixelOffsetXToTime(left);\n      this.state.options.scroll.chart.timeCenter = this.pixelOffsetXToTime(left + chartContainerWidth / 2);\n      this.state.options.scroll.chart.dateTime.left = dayjs(this.state.options.scroll.chart.time).valueOf();\n      this.state.options.scroll.chart.dateTime.right = dayjs(\n        this.pixelOffsetXToTime(left + this.state.refs.chart.clientWidth)\n      ).valueOf();\n      this.scrollTo(left, top);\n    },\n\n    /**\n     * Scroll current chart to specified time (in milliseconds)\n     *\n     * @param {int} time\n     */\n    scrollToTime(time) {\n      let pos = this.timeToPixelOffsetX(time);\n      const chartContainerWidth = this.state.refs.chartContainer.clientWidth;\n      pos = pos - chartContainerWidth / 2;\n      if (pos > this.state.options.width) {\n        pos = this.state.options.width - chartContainerWidth;\n      }\n      this.scrollTo(pos);\n    },\n\n    /**\n     * Scroll chart or task list to specified pixel values\n     *\n     * @param {number|null} left\n     * @param {number|null} top\n     */\n    scrollTo(left = null, top = null) {\n      if (left !== null) {\n        this.state.refs.chartCalendarContainer.scrollLeft = left;\n        this.state.refs.chartGraphContainer.scrollLeft = left;\n        this.state.refs.chartScrollContainerHorizontal.scrollLeft = left;\n        this.state.options.scroll.left = left;\n      }\n      if (top !== null) {\n        this.state.refs.chartScrollContainerVertical.scrollTop = top;\n        this.state.refs.chartGraph.scrollTop = top;\n        this.state.refs.taskListItems.scrollTop = top;\n        this.state.options.scroll.top = top;\n        this.syncScrollTop();\n      }\n    },\n\n    /**\n     * After some actions like time zoom change we need to recompensate scroll position\n     * so as a result everything will be in same place\n     */\n    fixScrollPos() {\n      this.scrollToTime(this.state.options.scroll.chart.timeCenter);\n    },\n\n    /**\n     * Mouse wheel event handler\n     */\n    onWheelChart(ev) {\n      if (!ev.shiftKey && ev.deltaX === 0) {\n        let top = this.state.options.scroll.top + ev.deltaY;\n        const chartClientHeight = this.state.options.rowsHeight;\n        const scrollHeight = this.state.refs.chartGraph.scrollHeight - chartClientHeight;\n        if (top < 0) {\n          top = 0;\n        } else if (top > scrollHeight) {\n          top = scrollHeight;\n        }\n        this.scrollTo(null, top);\n      } else if (ev.shiftKey && ev.deltaX === 0) {\n        let left = this.state.options.scroll.left + ev.deltaY;\n        const chartClientWidth = this.state.refs.chartScrollContainerHorizontal.clientWidth;\n        const scrollWidth = this.state.refs.chartScrollContainerHorizontal.scrollWidth - chartClientWidth;\n        if (left < 0) {\n          left = 0;\n        } else if (left > scrollWidth) {\n          left = scrollWidth;\n        }\n        this.scrollTo(left);\n      } else {\n        let left = this.state.options.scroll.left + ev.deltaX;\n        const chartClientWidth = this.state.refs.chartScrollContainerHorizontal.clientWidth;\n        const scrollWidth = this.state.refs.chartScrollContainerHorizontal.scrollWidth - chartClientWidth;\n        if (left < 0) {\n          left = 0;\n        } else if (left > scrollWidth) {\n          left = scrollWidth;\n        }\n        this.scrollTo(left);\n      }\n    },\n\n    /**\n     * Time zoom change event handler\n     */\n    onTimeZoomChange(timeZoom) {\n      this.state.options.times.timeZoom = timeZoom;\n      this.recalculateTimes();\n      this.calculateSteps();\n      this.fixScrollPos();\n    },\n\n    /**\n     * Row height change event handler\n     */\n    onRowHeightChange(height) {\n      this.state.options.row.height = height;\n      this.calculateTaskListColumnsDimensions();\n      this.syncScrollTop();\n    },\n\n    /**\n     * Scope change event handler\n     */\n    onScopeChange(value) {\n      this.state.options.scope.before = value;\n      this.state.options.scope.after = value;\n      this.initTimes();\n      this.calculateSteps();\n      this.computeCalendarWidths();\n      this.fixScrollPos();\n    },\n\n    /**\n     * Task list width change event handler\n     */\n    onTaskListWidthChange(value) {\n      this.state.options.taskList.percent = value;\n      this.calculateTaskListColumnsDimensions();\n      this.fixScrollPos();\n    },\n\n    /**\n     * Task list column width change event handler\n     */\n    onTaskListColumnWidthChange() {\n      this.calculateTaskListColumnsDimensions();\n      this.fixScrollPos();\n    },\n\n    /**\n     * Listen to specified event names\n     */\n    initializeEvents() {\n      this.$on('chart-scroll-horizontal', this.onScrollChart);\n      this.$on('chart-scroll-vertical', this.onScrollChart);\n      this.$on('chart-wheel', this.onWheelChart);\n      this.$on('times-timeZoom-change', this.onTimeZoomChange);\n      this.$on('row-height-change', this.onRowHeightChange);\n      this.$on('scope-change', this.onScopeChange);\n      this.$on('taskList-width-change', this.onTaskListWidthChange);\n      this.$on('taskList-column-width-change', this.onTaskListColumnWidthChange);\n    },\n\n    /**\n     * When some action was performed (scale change for example) - recalculate time variables\n     */\n    recalculateTimes() {\n      let max = this.state.options.times.timeScale * 60;\n      let min = this.state.options.times.timeScale;\n      let steps = max / min;\n      let percent = this.state.options.times.timeZoom / 100;\n      this.state.options.times.timePerPixel =\n        this.state.options.times.timeScale * steps * percent + Math.pow(2, this.state.options.times.timeZoom);\n      this.state.options.times.totalViewDurationMs = dayjs(this.state.options.times.lastTime).diff(\n        this.state.options.times.firstTime,\n        'milliseconds'\n      );\n      this.state.options.times.totalViewDurationPx =\n        this.state.options.times.totalViewDurationMs / this.state.options.times.timePerPixel;\n      this.state.options.width =\n        this.state.options.times.totalViewDurationPx + this.style['grid-line-vertical']['stroke-width'];\n    },\n\n    /**\n     * Initialize time variables\n     */\n    initTimes() {\n      this.state.options.times.firstTime = dayjs(this.state.options.times.firstTaskTime)\n        .locale(this.state.options.locale.name)\n        .startOf('day')\n        .subtract(this.state.options.scope.before, 'days')\n        .startOf('day')\n        .valueOf();\n      this.state.options.times.lastTime = dayjs(this.state.options.times.lastTaskTime)\n        .locale(this.state.options.locale.name)\n        .endOf('day')\n        .add(this.state.options.scope.after, 'days')\n        .endOf('day')\n        .valueOf();\n      this.recalculateTimes();\n    },\n\n    /**\n     * Calculate steps\n     * Steps are days by default\n     * Each step contain information about time offset and pixel offset of this time inside gantt chart\n     */\n    calculateSteps() {\n      const steps = [];\n      const lastMs = dayjs(this.state.options.times.lastTime).valueOf();\n      const currentDate = dayjs(this.state.options.times.firstTime);\n      steps.push({\n        time: currentDate.valueOf(),\n        offset: {\n          ms: 0,\n          px: 0\n        }\n      });\n      for (\n        let currentDate = dayjs(this.state.options.times.firstTime)\n          .add(1, this.state.options.times.stepDuration)\n          .startOf('day');\n        currentDate.valueOf() <= lastMs;\n        currentDate = currentDate.add(1, this.state.options.times.stepDuration).startOf('day')\n      ) {\n        const offsetMs = currentDate.diff(this.state.options.times.firstTime, 'milliseconds');\n        const offsetPx = offsetMs / this.state.options.times.timePerPixel;\n        const step = {\n          time: currentDate.valueOf(),\n          offset: {\n            ms: offsetMs,\n            px: offsetPx\n          }\n        };\n        const previousStep = steps[steps.length - 1];\n        previousStep.width = {\n          ms: offsetMs - previousStep.offset.ms,\n          px: offsetPx - previousStep.offset.px\n        };\n        steps.push(step);\n      }\n      const lastStep = steps[steps.length - 1];\n      lastStep.width = {\n        ms: this.state.options.times.totalViewDurationMs - lastStep.offset.ms,\n        px: this.state.options.times.totalViewDurationPx - lastStep.offset.px\n      };\n      this.state.options.times.steps = steps;\n    },\n\n    /**\n     * Calculate calendar widths - when scale was changed for example\n     */\n    computeCalendarWidths() {\n      this.computeDayWidths();\n      this.computeHourWidths();\n      this.computeMonthWidths();\n    },\n\n    /**\n     * Compute width of calendar hours column widths basing on text widths\n     */\n    computeHourWidths() {\n      const style = { ...this.style['calendar-row-text'], ...this.style['calendar-row-text--hour'] };\n      this.state.ctx.font = style['font-size'] + ' ' + style['font-family'];\n      const localeName = this.state.options.locale.name;\n      let currentDate = dayjs('2018-01-01T00:00:00').locale(localeName); // any date will be good for hours\n      let maxWidths = this.state.options.calendar.hour.maxWidths;\n      if (maxWidths.length) {\n        return;\n      }\n      for (let formatName in this.state.options.calendar.hour.format) {\n        maxWidths[formatName] = 0;\n      }\n      for (let hour = 0; hour < 24; hour++) {\n        let widths = { hour };\n        for (let formatName in this.state.options.calendar.hour.format) {\n          const hourFormatted = this.state.options.calendar.hour.format[formatName](currentDate);\n          this.state.options.calendar.hour.formatted[formatName].push(hourFormatted);\n          widths[formatName] = this.state.ctx.measureText(hourFormatted).width;\n        }\n        this.state.options.calendar.hour.widths.push(widths);\n        for (let formatName in this.state.options.calendar.hour.format) {\n          if (widths[formatName] > maxWidths[formatName]) {\n            maxWidths[formatName] = widths[formatName];\n          }\n        }\n        currentDate = currentDate.add(1, 'hour');\n      }\n    },\n\n    /**\n     * Compute calendar days column widths basing on text widths\n     */\n    computeDayWidths() {\n      const style = { ...this.style['calendar-row-text'], ...this.style['calendar-row-text--day'] };\n      this.state.ctx.font = style['font-size'] + ' ' + style['font-family'];\n      const localeName = this.state.options.locale.name;\n      let currentDate = dayjs(this.state.options.times.steps[0].time).locale(localeName);\n      let maxWidths = this.state.options.calendar.day.maxWidths;\n      this.state.options.calendar.day.widths = [];\n      Object.keys(this.state.options.calendar.day.format).forEach(formatName => {\n        maxWidths[formatName] = 0;\n      });\n      for (let day = 0, daysLen = this.state.options.times.steps.length; day < daysLen; day++) {\n        const widths = {\n          day\n        };\n        Object.keys(this.state.options.calendar.day.format).forEach(formatName => {\n          widths[formatName] = this.state.ctx.measureText(\n            this.state.options.calendar.day.format[formatName](currentDate)\n          ).width;\n        });\n        this.state.options.calendar.day.widths.push(widths);\n        Object.keys(this.state.options.calendar.day.format).forEach(formatName => {\n          if (widths[formatName] > maxWidths[formatName]) {\n            maxWidths[formatName] = widths[formatName];\n          }\n        });\n        currentDate = currentDate.add(1, 'day');\n      }\n    },\n\n    /**\n     * Months count\n     *\n     * @description Returns number of different months in specified time range\n     *\n     * @param {number} fromTime - date in ms\n     * @param {number} toTime - date in ms\n     *\n     * @returns {number} different months count\n     */\n    monthsCount(fromTime, toTime) {\n      if (fromTime > toTime) {\n        return 0;\n      }\n      let currentMonth = dayjs(fromTime);\n      let previousMonth = currentMonth.clone();\n      let monthsCount = 1;\n      while (currentMonth.valueOf() <= toTime) {\n        currentMonth = currentMonth.add(1, 'day');\n        if (previousMonth.month() !== currentMonth.month()) {\n          monthsCount++;\n        }\n        previousMonth = currentMonth.clone();\n      }\n      return monthsCount;\n    },\n\n    /**\n     * Compute month calendar columns widths basing on text widths\n     */\n    computeMonthWidths() {\n      const style = { ...this.style['calendar-row-text'], ...this.style['calendar-row-text--month'] };\n      this.state.ctx.font = style['font-size'] + ' ' + style['font-family'];\n      let maxWidths = this.state.options.calendar.month.maxWidths;\n      this.state.options.calendar.month.widths = [];\n      Object.keys(this.state.options.calendar.month.format).forEach(formatName => {\n        maxWidths[formatName] = 0;\n      });\n      const localeName = this.state.options.locale.name;\n      let currentDate = dayjs(this.state.options.times.firstTime).locale(localeName);\n      const monthsCount = this.monthsCount(this.state.options.times.firstTime, this.state.options.times.lastTime);\n      for (let month = 0; month < monthsCount; month++) {\n        const widths = {\n          month\n        };\n        Object.keys(this.state.options.calendar.month.format).forEach(formatName => {\n          widths[formatName] = this.state.ctx.measureText(\n            this.state.options.calendar.month.format[formatName](currentDate)\n          ).width;\n        });\n        this.state.options.calendar.month.widths.push(widths);\n        Object.keys(this.state.options.calendar.month.format).forEach(formatName => {\n          if (widths[formatName] > maxWidths[formatName]) {\n            maxWidths[formatName] = widths[formatName];\n          }\n        });\n        currentDate = currentDate.add(1, 'month');\n      }\n    },\n\n    /**\n     * Prepare time and date variables for gantt\n     */\n    prepareDates() {\n      let firstTaskTime = Number.MAX_SAFE_INTEGER;\n      let lastTaskTime = 0;\n      for (let index = 0, len = this.state.tasks.length; index < len; index++) {\n        let task = this.state.tasks[index];\n        if (task.startTime < firstTaskTime) {\n          firstTaskTime = task.startTime;\n        }\n        if (task.startTime + task.duration > lastTaskTime) {\n          lastTaskTime = task.startTime + task.duration;\n        }\n      }\n      this.state.options.times.firstTaskTime = firstTaskTime;\n      this.state.options.times.lastTaskTime = lastTaskTime;\n      this.state.options.times.firstTime = dayjs(firstTaskTime)\n        .locale(this.state.options.locale.name)\n        .startOf('day')\n        .subtract(this.state.options.scope.before, 'days')\n        .startOf('day')\n        .valueOf();\n      this.state.options.times.lastTime = dayjs(lastTaskTime)\n        .locale(this.state.options.locale.name)\n        .endOf('day')\n        .add(this.state.options.scope.after, 'days')\n        .endOf('day')\n        .valueOf();\n    },\n\n    /**\n     * Setup and calculate everything\n     */\n    setup(itsUpdate = '') {\n      this.initialize(itsUpdate);\n      this.prepareDates();\n      this.initTimes();\n      this.calculateSteps();\n      this.computeCalendarWidths();\n      this.state.options.taskList.width = this.state.options.taskList.columns.reduce(\n        (prev, current) => {\n          return { width: prev.width + current.width };\n        },\n        { width: 0 }\n      ).width;\n    },\n\n    /**\n     * Global resize event (from window.addEventListener)\n     */\n    globalOnResize() {\n      if (typeof this.$el === 'undefined' || !this.$el) {\n        return;\n      }\n      this.state.options.clientWidth = this.$el.clientWidth;\n      if (\n        this.state.options.taskList.widthFromPercentage >\n        (this.state.options.clientWidth / 100) * this.state.options.taskList.widthThreshold\n      ) {\n        const diff =\n          this.state.options.taskList.widthFromPercentage -\n          (this.state.options.clientWidth / 100) * this.state.options.taskList.widthThreshold;\n        let diffPercent = 100 - (diff / this.state.options.taskList.widthFromPercentage) * 100;\n        if (diffPercent < 0) {\n          diffPercent = 0;\n        }\n        this.state.options.taskList.columns.forEach(column => {\n          column.thresholdPercent = diffPercent;\n        });\n      } else {\n        this.state.options.taskList.columns.forEach(column => {\n          column.thresholdPercent = 100;\n        });\n      }\n      this.calculateTaskListColumnsDimensions();\n      this.$emit('calendar-recalculate');\n      this.syncScrollTop();\n    }\n  },\n\n  computed: {\n    /**\n     * Get visible tasks\n     * Very important method which will bring us only those tasks that are visible inside gantt chart\n     * For example when task is collapsed - children of this task are not visible - we should not render them\n     */\n    visibleTasks() {\n      const visibleTasks = this.state.tasks.filter(task => this.isTaskVisible(task));\n      const maxRows = visibleTasks.slice(0, this.state.options.maxRows);\n      this.state.options.rowsHeight = this.getTasksHeight(maxRows);\n      let heightCompensation = 0;\n      if (this.state.options.maxHeight && this.state.options.rowsHeight > this.state.options.maxHeight) {\n        heightCompensation = this.state.options.rowsHeight - this.state.options.maxHeight;\n        this.state.options.rowsHeight = this.state.options.maxHeight;\n      }\n      this.state.options.height = this.getHeight(maxRows) - heightCompensation;\n      this.state.options.allVisibleTasksHeight = this.getTasksHeight(visibleTasks);\n      this.state.options.outerHeight = this.getHeight(maxRows, true) - heightCompensation;\n      let len = visibleTasks.length;\n      for (let index = 0; index < len; index++) {\n        let task = visibleTasks[index];\n        task.width =\n          task.duration / this.state.options.times.timePerPixel - this.style['grid-line-vertical']['stroke-width'];\n        if (task.width < 0) {\n          task.width = 0;\n        }\n        task.height = this.state.options.row.height;\n        task.x = this.timeToPixelOffsetX(task.startTime);\n        task.y =\n          (this.state.options.row.height + this.state.options.chart.grid.horizontal.gap * 2) * index +\n          this.state.options.chart.grid.horizontal.gap;\n      }\n      return visibleTasks;\n    },\n\n    /**\n     * Style shortcut\n     */\n    style() {\n      return this.state.dynamicStyle;\n    },\n\n    /**\n     * Get columns and compute dimensions on the fly\n     */\n    getTaskListColumns() {\n      this.calculateTaskListColumnsDimensions();\n      return this.state.options.taskList.columns;\n    },\n\n    /**\n     * Tasks used for communicate with parent component\n     */\n    outputTasks() {\n      return this.state.tasks;\n    },\n\n    /**\n     * Options used to communicate with parent component\n     */\n    outputOptions() {\n      return this.state.options;\n    }\n  },\n\n  /**\n   * Watch tasks after gantt instance is created and react when we have new kids on the block\n   */\n  created() {\n    this.initializeEvents();\n    this.setup();\n    this.state.unwatchTasks = this.$watch(\n      'tasks',\n      tasks => {\n        const notEqual = notEqualDeep(tasks, this.outputTasks);\n        if (notEqual) {\n          this.setup('tasks');\n        }\n      },\n      { deep: true }\n    );\n    this.state.unwatchOptions = this.$watch(\n      'options',\n      opts => {\n        const notEqual = notEqualDeep(opts, this.outputOptions);\n        if (notEqual) {\n          this.setup('options');\n        }\n      },\n      { deep: true }\n    );\n    this.state.unwatchStyle = this.$watch(\n      'dynamicStyle',\n      style => {\n        const notEqual = notEqualDeep(style, this.dynamicStyle);\n        if (notEqual) {\n          this.initializeStyle();\n        }\n      },\n      { deep: true, immediate: true }\n    );\n\n    this.state.unwatchOutputTasks = this.$watch(\n      'outputTasks',\n      tasks => {\n        this.$emit('tasks-changed', tasks.map(task => task));\n      },\n      { deep: true }\n    );\n    this.state.unwatchOutputOptions = this.$watch(\n      'outputOptions',\n      options => {\n        this.$emit('options-changed', mergeDeep({}, options));\n      },\n      { deep: true }\n    );\n    this.state.unwatchOutputStyle = this.$watch(\n      'style',\n      style => {\n        this.$emit('dynamic-style-changed', mergeDeep({}, style));\n      },\n      { deep: true }\n    );\n\n    this.$root.$emit('gantt-elastic-created', this);\n    this.$emit('created', this);\n  },\n\n  /**\n   * Emit before-mount event\n   */\n  beforeMount() {\n    this.$emit('before-mount', this);\n  },\n\n  /**\n   * Emit ready/mounted events and deliver this gantt instance to outside world when needed\n   */\n  mounted() {\n    this.state.options.clientWidth = this.$el.clientWidth;\n    this.state.resizeObserver = new ResizeObserver((entries, observer) => {\n      this.globalOnResize();\n    });\n    this.state.resizeObserver.observe(this.$el.parentNode);\n    this.globalOnResize();\n    this.$emit('ready', this);\n    this.$root.$emit('gantt-elastic-mounted', this);\n    this.$emit('mounted', this);\n    this.$root.$emit('gantt-elastic-ready', this);\n  },\n\n  /**\n   * Emit event when data was changed and before update (you can cleanup dom events here for example)\n   */\n  beforeUpdate() {\n    this.$emit('before-update');\n  },\n\n  /**\n   * Emit event when gantt-elastic view was updated\n   */\n  updated() {\n    this.$nextTick(() => {\n      this.$emit('updated');\n    });\n  },\n\n  /**\n   * Before destroy event - clean up\n   */\n  beforeDestroy() {\n    this.state.resizeObserver.unobserve(this.$el.parentNode);\n    this.state.unwatchTasks();\n    this.state.unwatchOptions();\n    this.state.unwatchStyle();\n    this.state.unwatchOutputTasks();\n    this.state.unwatchOutputOptions();\n    this.state.unwatchOutputStyle();\n    this.$emit('before-destroy');\n  },\n\n  /**\n   * Emit event after gantt-elastic was destroyed\n   */\n  destroyed() {\n    this.$emit('destroyed');\n  }\n};\nexport default GanttElastic;\n</script>\n\n<style>\n[class^='gantt-elastic'],\n[class*=' gantt-elastic'] {\n  box-sizing: border-box;\n}\n.gantt-elastic__main-view svg {\n  display: block;\n}\n.gantt-elastic__grid-horizontal-line,\n.gantt-elastic__grid-vertical-line {\n  stroke: #a0a0a0;\n  stroke-width: 1;\n}\nforeignObject > * {\n  margin: 0px;\n}\n.gantt-elastic .p-2 {\n  padding: 10rem;\n}\n.gantt-elastic__main-view-main-container,\n.gantt-elastic__main-view-container {\n  overflow: hidden;\n  max-width: 100%;\n}\n.gantt-elastic__task-list-header-column:last-of-type {\n  border-right: 1px solid #00000050;\n}\n.gantt-elastic__task-list-item:last-of-type {\n  border-bottom: 1px solid #00000050;\n}\n.gantt-elastic__task-list-item-value-wrapper:hover {\n  overflow: visible !important;\n}\n.gantt-elastic__task-list-item-value-wrapper:hover > .gantt-elastic__task-list-item-value-container {\n  position: relative;\n  overflow: visible !important;\n}\n.gantt-elastic__task-list-item-value-wrapper:hover > .gantt-elastic__task-list-item-value {\n  position: absolute;\n}\n</style>\n"]}]}