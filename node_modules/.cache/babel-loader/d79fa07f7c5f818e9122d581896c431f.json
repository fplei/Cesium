{"remainingRequest":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_vue-loader@15.10.0@vue-loader/lib/index.js??vue-loader-options!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/components/Chart/ProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/components/Chart/ProgressBar.vue","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/babel.config.js","mtime":1658370777000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_vue-loader@15.10.0@vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdQcm9ncmVzc0JhcicsCiAgaW5qZWN0OiBbJ3Jvb3QnXSwKICBwcm9wczogWyd0YXNrJ10sCgogIGRhdGEoKSB7CiAgICByZXR1cm4ge307CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIC8qKgogICAgICogR2V0IHByb2dyZXNzIHdpZHRoCiAgICAgKgogICAgICogQHJldHVybnMge3N0cmluZ30KICAgICAqLwogICAgZ2V0UHJvZ3Jlc3NXaWR0aCgpIHsKICAgICAgcmV0dXJuIHRoaXMudGFzay5wcm9ncmVzcyArICclJzsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgbGluZSBwb2ludHMKICAgICAqCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAgICovCiAgICBnZXRMaW5lUG9pbnRzKCkgewogICAgICBjb25zdCBzdGFydCA9IHRoaXMudGFzay53aWR0aCAvIDEwMCAqIHRoaXMudGFzay5wcm9ncmVzczsKICAgICAgcmV0dXJuIGBNICR7c3RhcnR9IDAgTCAke3N0YXJ0fSAke3RoaXMudGFzay5oZWlnaHR9YDsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgc29saWQgc3R5bGUKICAgICAqCiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fQogICAgICovCiAgICBnZXRTb2xpZFN0eWxlKCkgewogICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yb290LnN0YXRlLm9wdGlvbnMuY2hhcnQucHJvZ3Jlc3Muc3R5bGVzLmJhci5zb2xpZCwgdGhpcy50YXNrLnByb2dyZXNzQmFyU3R5bGUuYmFyKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgbGluZSBzdHlsZQogICAgICoKICAgICAqIEByZXR1cm5zIHtvYmplY3R9CiAgICAgKi8KICAgIGdldExpbmVTdHlsZSgpIHsKICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHsKICAgICAgICBzdHJva2U6IHRoaXMucm9vdC5zdGF0ZS5vcHRpb25zLnJvdy5zdHlsZXMuYmFyLnN0cm9rZSArICdhMCcsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IHRoaXMucm9vdC5zdGF0ZS5vcHRpb25zLnJvdy5zdHlsZXMuYmFyWydzdHJva2Utd2lkdGgnXSAvIDIKICAgICAgfSwgdGhpcy50YXNrLnN0eWxlKTsKICAgIH0KCiAgfQp9Ow=="},{"version":3,"mappings":"AA8DA;EACAA,mBADA;EAEAC,gBAFA;EAGAC,eAHA;;EAIAC;IACA;EACA,CANA;;EAQAC;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA,CARA;;IAUA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;IACA,CAlBA;;IAoBA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA,CA3BA;;IA6BA;AACA;AACA;AACA;AACA;IACAC;MACA,qBACA,EADA,EAEA;QACAC,4DADA;QAEA;MAFA,CAFA,EAMA,eANA;IAQA;;EA3CA;AARA","names":["name","inject","props","data","computed","getProgressWidth","getLinePoints","getSolidStyle","getLineStyle","stroke"],"sourceRoot":"node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/components/Chart","sources":["ProgressBar.vue"],"sourcesContent":["<!--\n/**\n * @fileoverview ProgressBar component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <g\n    class=\"gantt-elastic__chart-row-progress-bar-wrapper\"\n    :style=\"{ ...root.style['chart-row-progress-bar-wrapper'], ...task.style['chart-row-progress-bar-wrapper'] }\"\n  >\n    <defs>\n      <pattern\n        id=\"diagonalHatch\"\n        :width=\"root.state.options.chart.progress.width\"\n        :height=\"root.state.options.chart.progress.width\"\n        patternTransform=\"rotate(45 0 0)\"\n        patternUnits=\"userSpaceOnUse\"\n      >\n        <line\n          class=\"chart-row-progress-bar-line\"\n          :style=\"{ ...root.style['chart-row-progress-bar-line'], ...task.style['chart-row-progress-bar-line'] }\"\n          x1=\"0\"\n          y1=\"0\"\n          x2=\"0\"\n          :y2=\"root.state.options.chart.progress.width\"\n        />\n      </pattern>\n    </defs>\n    <rect\n      v-if=\"root.state.options.chart.progress.bar\"\n      class=\"gantt-elastic__chart-row-progress-bar-solid\"\n      :style=\"{ ...root.style['chart-row-progress-bar-solid'], ...task.style['chart-row-progress-bar-solid'] }\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"getProgressWidth\"\n    ></rect>\n    <g v-if=\"root.state.options.chart.progress.pattern\">\n      <rect\n        class=\"gantt-elastic__chart-row-progress-bar-pattern\"\n        :style=\"{ ...root.style['chart-row-progress-bar-pattern'], ...task.style['chart-row-progress-bar-pattern'] }\"\n        :x=\"getProgressWidth\"\n        y=\"0\"\n        :width=\"100 - task.progress + '%'\"\n        height=\"100%\"\n      ></rect>\n      <path\n        class=\"gantt-elastic__chart-row-progress-bar-outline\"\n        :style=\"{\n          ...root.style['chart-row-progress-bar-outline'],\n          ...task.style['base'],\n          ...task.style['chart-row-progress-bar-outline']\n        }\"\n        :d=\"getLinePoints\"\n      ></path>\n    </g>\n  </g>\n</template>\n\n<script>\nexport default {\n  name: 'ProgressBar',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n\n  computed: {\n    /**\n     * Get progress width\n     *\n     * @returns {string}\n     */\n    getProgressWidth() {\n      return this.task.progress + '%';\n    },\n\n    /**\n     * Get line points\n     *\n     * @returns {string}\n     */\n    getLinePoints() {\n      const start = (this.task.width / 100) * this.task.progress;\n      return `M ${start} 0 L ${start} ${this.task.height}`;\n    },\n\n    /**\n     * Get solid style\n     *\n     * @returns {object}\n     */\n    getSolidStyle() {\n      return Object.assign({}, this.root.state.options.chart.progress.styles.bar.solid, this.task.progressBarStyle.bar);\n    },\n\n    /**\n     * Get line style\n     *\n     * @returns {object}\n     */\n    getLineStyle() {\n      return Object.assign(\n        {},\n        {\n          stroke: this.root.state.options.row.styles.bar.stroke + 'a0',\n          'stroke-width': this.root.state.options.row.styles.bar['stroke-width'] / 2\n        },\n        this.task.style\n      );\n    }\n  }\n};\n</script>\n"]}]}