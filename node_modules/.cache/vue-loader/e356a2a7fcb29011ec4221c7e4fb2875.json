{"remainingRequest":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_vue-loader@15.10.0@vue-loader/lib/index.js??vue-loader-options!/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/components/Chart/Grid.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/components/Chart/Grid.vue","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fanpenglei/Study/Code/cesium-demoV1.1/node_modules/_vue-loader@15.10.0@vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnR3JpZCcsCiAgaW5qZWN0OiBbJ3Jvb3QnXSwKICBkYXRhKCkgewogICAgcmV0dXJuIHt9OwogIH0sCiAgLyoqCiAgICogQ3JlYXRlZAogICAqLwogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLnJvb3QuJG9uKCdyZWNlbnRlclBvc2l0aW9uJywgdGhpcy5yZWNlbnRlclBvc2l0aW9uKTsKICB9LAoKICAvKioKICAgKiBNb3VudGVkCiAgICovCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIC8vIGJlY2F1c2Ugb2Ygc3R1cGlkIHNsaWRlciA6LwogICAgICAgIHRoaXMucm9vdC5zY3JvbGxUb1RpbWUodGhpcy50aW1lTGluZVBvc2l0aW9uLnRpbWUpOwogICAgICB9KTsKICAgIH0pOwogIH0sCgogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogUmVjZW50ZXIgcG9zaXRpb24gLSBnbyB0byBjdXJyZW50IHRpbWUgbGluZQogICAgICovCiAgICByZWNlbnRlclBvc2l0aW9uKCkgewogICAgICB0aGlzLnJvb3Quc2Nyb2xsVG9UaW1lKHRoaXMudGltZUxpbmVQb3NpdGlvbi50aW1lKTsKICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSB2ZXJ0aWNhbCBsaW5lcyBvZiB0aGUgZ3JpZAogICAgICoKICAgICAqIEByZXR1cm5zIHthcnJheX0KICAgICAqLwogICAgdmVydGljYWxMaW5lcygpIHsKICAgICAgbGV0IGxpbmVzID0gW107CiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5yb290LnN0YXRlOwogICAgICBzdGF0ZS5vcHRpb25zLnRpbWVzLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7CiAgICAgICAgaWYgKHRoaXMucm9vdC5pc0luc2lkZVZpZXdQb3J0KHN0ZXAub2Zmc2V0LnB4LCAxKSkgewogICAgICAgICAgbGluZXMucHVzaCh7CiAgICAgICAgICAgIGtleTogc3RlcC50aW1lLAogICAgICAgICAgICB4MTogc3RlcC5vZmZzZXQucHgsCiAgICAgICAgICAgIHkxOiAwLAogICAgICAgICAgICB4Mjogc3RlcC5vZmZzZXQucHgsCiAgICAgICAgICAgIHkyOgogICAgICAgICAgICAgIHN0YXRlLnRhc2tzLmxlbmd0aCAqIChzdGF0ZS5vcHRpb25zLnJvdy5oZWlnaHQgKyBzdGF0ZS5vcHRpb25zLmNoYXJ0LmdyaWQuaG9yaXpvbnRhbC5nYXAgKiAyKSArCiAgICAgICAgICAgICAgdGhpcy5yb290LnN0eWxlWydncmlkLWxpbmUtdmVydGljYWwnXVsnc3Ryb2tlLXdpZHRoJ10KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBsaW5lczsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSBob3Jpem9udGFsIGxpbmVzIG9mIHRoZSBncmlkCiAgICAgKgogICAgICogQHJldHVybnMge2FycmF5fQogICAgICovCiAgICBob3Jpem9udGFsTGluZXMoKSB7CiAgICAgIGxldCBsaW5lcyA9IFtdOwogICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucm9vdC5zdGF0ZS5vcHRpb25zOwogICAgICBsZXQgdGFza3MgPSB0aGlzLnJvb3QudmlzaWJsZVRhc2tzOwogICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGxlbiA9IHRhc2tzLmxlbmd0aDsgaW5kZXggPD0gbGVuOyBpbmRleCsrKSB7CiAgICAgICAgY29uc3QgeSA9CiAgICAgICAgICBpbmRleCAqIChzdGF0ZS5yb3cuaGVpZ2h0ICsgc3RhdGUuY2hhcnQuZ3JpZC5ob3Jpem9udGFsLmdhcCAqIDIpICsKICAgICAgICAgIHRoaXMucm9vdC5zdHlsZVsnZ3JpZC1saW5lLXZlcnRpY2FsJ11bJ3N0cm9rZS13aWR0aCddIC8gMjsKICAgICAgICBsaW5lcy5wdXNoKHsKICAgICAgICAgIGtleTogJ2hsJyArIGluZGV4LAogICAgICAgICAgeDE6IDAsCiAgICAgICAgICB5MTogeSwKICAgICAgICAgIHgyOiAnMTAwJScsCiAgICAgICAgICB5MjogeQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBsaW5lczsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDaGVjayBpZiBzcGVjaWZpZWQgbGluZSBpcyBpbnNpZGUgdmlld3BvcnQgKHZpc2libGUpCiAgICAgKgogICAgICogQHJldHVybnMge2Z1bmN0aW9ufQogICAgICovCiAgICBpblZpZXdQb3J0KCkgewogICAgICByZXR1cm4gbGluZSA9PiB7CiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnJvb3Quc3RhdGUub3B0aW9uczsKICAgICAgICByZXR1cm4gbGluZS54MSA+PSBzdGF0ZS5zY3JvbGwuY2hhcnQubGVmdCAmJiBsaW5lLngxIDw9IHN0YXRlLnNjcm9sbC5jaGFydC5yaWdodDsKICAgICAgfTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgY3VycmVudCB0aW1lIGxpbmUgcG9zaXRpb24KICAgICAqCiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fQogICAgICovCiAgICB0aW1lTGluZVBvc2l0aW9uKCkgewogICAgICBjb25zdCBkID0gbmV3IERhdGUoKTsKICAgICAgY29uc3QgY3VycmVudCA9IGQuZ2V0VGltZSgpOwogICAgICBjb25zdCBjdXJyZW50T2Zmc2V0ID0gdGhpcy5yb290LnRpbWVUb1BpeGVsT2Zmc2V0WChjdXJyZW50KTsKICAgICAgY29uc3QgdGltZUxpbmUgPSB7CiAgICAgICAgeDogMCwKICAgICAgICB5MTogMCwKICAgICAgICB5MjogJzEwMCUnLAogICAgICAgIGRhdGVUaW1lOiAnJywKICAgICAgICB0aW1lOiBjdXJyZW50CiAgICAgIH07CiAgICAgIHRpbWVMaW5lLnggPSBjdXJyZW50T2Zmc2V0OwogICAgICB0aW1lTGluZS5kYXRlVGltZSA9IGQudG9Mb2NhbGVEYXRlU3RyaW5nKCk7CiAgICAgIHJldHVybiB0aW1lTGluZTsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["Grid.vue"],"names":[],"mappings":";AAqfile":"Grid.vue","sourceRoot":"node_modules/_gantt-elastic@1.0.12@gantt-elastic/src/components/Chart","sourcesContent":["<!--\n/**\n * @fileoverview Grid component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <svg\n    class=\"gantt-elastic__grid-lines-wrapper\"\n    :style=\"{ ...root.style['grid-lines-wrapper'] }\"\n    ref=\"chart\"\n    x=\"0\"\n    y=\"0\"\n    :width=\"root.state.options.width\"\n    :height=\"root.state.options.allVisibleTasksHeight\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g class=\"gantt-elastic__grid-lines\" :style=\"{ ...root.style['grid-lines'] }\">\n      <line\n        class=\"gantt-elastic__grid-line-horizontal\"\n        :style=\"{ ...root.style['grid-line-horizontal'] }\"\n        v-for=\"line in horizontalLines\"\n        :key=\"line.key\"\n        :x1=\"line.x1\"\n        :y1=\"line.y1\"\n        :x2=\"line.x2\"\n        :y2=\"line.y2\"\n      ></line>\n      <line\n        class=\"gantt-elastic__grid-line-vertical\"\n        :style=\"{ ...root.style['grid-line-vertical'] }\"\n        v-for=\"line in verticalLines\"\n        :key=\"line.key\"\n        :x1=\"line.x1\"\n        :y1=\"line.y1\"\n        :x2=\"line.x2\"\n        :y2=\"line.y2\"\n      ></line>\n      <line\n        class=\"gantt-elastic__grid-line-time\"\n        :style=\"{ ...root.style['grid-line-time'] }\"\n        :x1=\"timeLinePosition.x\"\n        :y1=\"timeLinePosition.y1\"\n        :x2=\"timeLinePosition.x\"\n        :y2=\"timeLinePosition.y2\"\n      ></line>\n    </g>\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'Grid',\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  /**\n   * Created\n   */\n  created() {\n    this.root.$on('recenterPosition', this.recenterPosition);\n  },\n\n  /**\n   * Mounted\n   */\n  mounted() {\n    this.$nextTick(() => {\n      this.$nextTick(() => {\n        // because of stupid slider :/\n        this.root.scrollToTime(this.timeLinePosition.time);\n      });\n    });\n  },\n\n  methods: {\n    /**\n     * Recenter position - go to current time line\n     */\n    recenterPosition() {\n      this.root.scrollToTime(this.timeLinePosition.time);\n    }\n  },\n\n  computed: {\n    /**\n     * Generate vertical lines of the grid\n     *\n     * @returns {array}\n     */\n    verticalLines() {\n      let lines = [];\n      const state = this.root.state;\n      state.options.times.steps.forEach(step => {\n        if (this.root.isInsideViewPort(step.offset.px, 1)) {\n          lines.push({\n            key: step.time,\n            x1: step.offset.px,\n            y1: 0,\n            x2: step.offset.px,\n            y2:\n              state.tasks.length * (state.options.row.height + state.options.chart.grid.horizontal.gap * 2) +\n              this.root.style['grid-line-vertical']['stroke-width']\n          });\n        }\n      });\n      return lines;\n    },\n\n    /**\n     * Generate horizontal lines of the grid\n     *\n     * @returns {array}\n     */\n    horizontalLines() {\n      let lines = [];\n      const state = this.root.state.options;\n      let tasks = this.root.visibleTasks;\n      for (let index = 0, len = tasks.length; index <= len; index++) {\n        const y =\n          index * (state.row.height + state.chart.grid.horizontal.gap * 2) +\n          this.root.style['grid-line-vertical']['stroke-width'] / 2;\n        lines.push({\n          key: 'hl' + index,\n          x1: 0,\n          y1: y,\n          x2: '100%',\n          y2: y\n        });\n      }\n      return lines;\n    },\n\n    /**\n     * Check if specified line is inside viewport (visible)\n     *\n     * @returns {function}\n     */\n    inViewPort() {\n      return line => {\n        const state = this.root.state.options;\n        return line.x1 >= state.scroll.chart.left && line.x1 <= state.scroll.chart.right;\n      };\n    },\n\n    /**\n     * Get current time line position\n     *\n     * @returns {object}\n     */\n    timeLinePosition() {\n      const d = new Date();\n      const current = d.getTime();\n      const currentOffset = this.root.timeToPixelOffsetX(current);\n      const timeLine = {\n        x: 0,\n        y1: 0,\n        y2: '100%',\n        dateTime: '',\n        time: current\n      };\n      timeLine.x = currentOffset;\n      timeLine.dateTime = d.toLocaleDateString();\n      return timeLine;\n    }\n  }\n};\n</script>\n"]}]}